// Use watch_css.sh to:
// - Watch for changes in style.scss and generate _styles.css
// - Then use entr to watch for changes in _styles.css and execute postcss to handle vendor prefixes


@import url('https://fonts.googleapis.com/css?family=Anonymous+Pro');
$font: 'Anonymous Pro', monospace;
$fsize: 1.1rem;

// Greens
// ============
$soft:      #2A742A;
$soft_05:   #1B4A1B;
$soft_2:    #63B963;
$soft_3:    #254625;
$soft_4:    #0E1C0E;

$soft_rgba: rgba(42, 116, 42, 0.75);

$bright:     #43B943;
$bright_mid: #51DF51;
$bright_2:   #5CFF5C; // normal from /js/shirousagi.js
$high:       #8F8;

// Blues (~purple)
// ========================
$soft_blue:     #2A2A74;
$bright_blue:   #4343B9;
$bright_blue_2: #5C5CFF;

$light_blue:    #2F6CD2;
$dark_blue:     #002C92;
$dark_blue_2:   #001C82;
$dark_blue_3:   #000022;

$dark_blue_mid: #18191a;
$dark_blue_up:  #011931;

// Very dark
// ============
$dark_dark:     #272926;
$dark_dark_mid: #191A18;
$dark_dark_2:   #0B0B0A;
$dark_dark_3:   #070707;


// ==========================================================
//                      Main page scheme
// ==========================================================

$back:  #0a0b0b;
$dark:  #D2D9E0; // Text color
$light: #2FD26C; // (#057bf1) // Green scheme color
$opposite:  #121920; // Link hover text color

// ==========================================================


$helv-light: 300 $fsize (
    'HelveticaNeueLight',
    'HelveticaNeue-Light',
    'Helvetica Neue Light',
    'HelveticaNeue',
    'Helvetica Neue',
    'Helvetica',
    'Arial',
    sans-serif
);
$helv-thin: 200 $fsize (
    'HelveticaNeueThin',
    'HelveticaNeue-Thin',
    'Helvetica Neue Thin',
    'HelveticaNeue',
    'Helvetica Neue',
    'Arial',
    sans-serif
);
$helv-ultra-light: 100 $fsize (
    'HelveticaNeue-UltraLight',
    'Helvetica Neue UltraLight',
    'HelveticaNeueUltraLight',
    'HelveticaNeue-Ultra-Light',
    'Helvetica Neue Ultra Light',
    'HelveticaNeue',
    'Helvetica Neue',
    'Arial',
    sans-serif
);


html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    background: #000;

    color: $dark;
    font-family: $font;
}

::selection {
    background: $light;
    color: #FFF;
}

::-moz-selection {
    background: $light;
    color: #FFF;
}

a {
    text-decoration: none;
    color: $light;
    transition: color 0.4s ease, background-color 0.4s ease;

    &:hover {
        color: $opposite;
        background-color: $light;
    }
}

.vert-center-wrap {
    display: block;
    position: absolute;
    bottom: 50%;
    width: 100%;
    z-index: 1338;
}


@function final_w($str) {
    $text_len: str-length($str) + 1;

    $final_w: $text_len / 2;

    @if ($text_len > 10) {
        $final_w: $final_w + if($text_len % 2 == 0, 0.75, 0.5);
    }
    @else {
        $final_w: $final_w - 0.2;
    }

    // This is in em
    @return $final_w + 0em;
}

@mixin anim_setup() {
    // For animations
    width: 0;
    white-space: nowrap;
    overflow: hidden;
    // Return to transparent when finished typing
    border-right: 2px solid transparent;
}

@mixin type_animate($str, $iter: null, $pad: false) {
    // Animation vars
    $len: str-length($str);
    $steps: $len;

    $type_delay: 1s;
    // Duration
    $type_dur: if($steps <= 10, 0.4s, 1s);
    $cursor_dur: 0.5s;

    $cursor_iter: null;
    @if ($iter) {
        $cursor_iter: $iter;
    }
    @else {
        // Only flash cursor until done typing
        $cursor_iter: ($type_delay + $type_dur) / $cursor_dur;
    }

    $kf_type:  'type_'  + $len;
    $kf_blink: 'blink_' + $len;

    @keyframes #{$kf_type} {
        from {
            width: 0;
            @if ($pad) {
                padding-left: 0;
            }
        }
        to {
            width: final_w($str);
            @if ($pad) {
                padding-left: (0.4 / 8 + 0em);
            }
        }
    }
    @keyframes #{$kf_blink} {
        from {
            border-right-color: transparent;
        }
        to {
            border-right-color: $soft_2;
        }
    }

    animation: (
        #{$kf_type} $type_dur steps($steps) $type_delay 1 normal both,
        #{$kf_blink} $cursor_dur steps(50) $cursor_iter alternate
    );
}

// Enter text vars
$enter_str: 'press any key or tap to enter'; // Copy the string from index.html here
$et_fsize: $fsize * 1.3;

#wrap {
    min-width: 100%;
    min-height: 100%;
    position: relative;

    overflow-y: scroll;

    background: url('../images/black_denim.png');

    z-index: -1;
    opacity: 0;
    // Prevent extra space on space until after canvas animations are done
    max-height: 0;
}

#canvas {
    position: absolute;
    display: block;
    z-index: 1337;

    width: 100%;
    height: 100%;
    background: #000;

    // Disallow select canvas
    user-select: none;

    opacity: 1;
    transition: opacity 1.4s ease-in-out;
}

#footer {
    $footerh: 10em;
    height: $footerh;
    margin-top: -#{$footerh};

    color: $soft;
    font-size: $fsize * 2 / 3;
    text-align: center;
}

$svg_minw: 0;
.svg-container {
    $num_svg: 4; // Number of SVG links

    $svg: 4em;
    $svg_cntr: $svg * 3 / 2;
    $svg_marg: $svg / 2;

    // SVG border size
    $svgb_size: 1px;
    $svgb_radius: 0.3em; // Border radius
    // SVG hover border color
    $shc_color: $light;

    // Arrow border color
    $arb_color: $shc_color;
    $arrow_bg: $shc_color;
    $arrow_text_color: $opposite;

    // Triangle size
    $tsize: $svg / 5.7;
    $tborder_size: $svgb_size;
    $toffset: round($tborder_size * 1.41421); // sqrt(2) ~ 1.41421
    $toffset: ($toffset / 16px) + 0em; // Convert from px to em
    $tsize_outer: $tsize + $toffset;

    $svg_minw: $svg_cntr * $num_svg + $svg_marg * 2 !global; // Set global var


    // Height is the SVG itself, the margin,
    // the arrow dropdown, plus the border converted to em
    // height: $svg * (1 + 1 + 0.5) + ( ($svgb_size / 16px) + 0em );
    width: 85%;
    min-width: $svg_minw;
    margin: 0 auto;
    columns: $num_svg;

    $sht_dur: 0.4s; // Duration
    @mixin svg_hover_transition($option) {
        transition: $option $sht_dur ease;
    }


    .arrow {
        display: block;
        position: relative;
        margin-top: $tsize_outer;
        border: $tborder_size solid $arb_color;
        font-size: ($svg / 4) * 1.1;

        // &::before, &::after {
        &::after {
            content: '';
            display: block;
            position: absolute;
            bottom: 100%;
            left: 50%;
            height: 0;
            width: 0;
            border: solid transparent;
        }

        &::after {
            border-bottom-color: $arrow_bg;
            border-width: $tsize;
            margin-left: -$tsize;
        }

        // For border on triangle
        // ========================
        // &::before {
        //     border-bottom-color: #FFF;
        //     border-width: $tsize_outer;
        //     margin-left: -$tsize_outer;
        // }
    }

    > div {
        > a {
            width:  $svg_cntr;
            min-height: $svg_cntr;
            display: inline-block;

            border: $svgb_size solid $dark;
            border-radius: $svgb_radius;
            @include svg_hover_transition(border-color);

            text-decoration: none;

            > svg {
                display: block;
                height: $svg;
                margin: ( $svg_marg / 2 ) auto 0;
                fill: $dark;
                @include svg_hover_transition(fill);

                > text {
                    user-select: none;
                }
            }

            > .arrow-wrap {
                position: relative;
                margin-top: $svg_marg / 3;

                max-height: 0;
                overflow-y: hidden;
                transition: max-height 0.2s ease;
            }

            > .arrow-wrap > .arrow {
                z-index: 1;
                border-bottom-left-radius: $svgb_radius / 2;
                border-bottom-right-radius: $svgb_radius / 2;
                padding: 0.3em 0;
                background-color: $arrow_bg;
                color: $arrow_text_color;

                text-align: center;

                // border: $tborder_size solid $shc_color;

                border-color: $arb_color transparent transparent;
                border-width: $tborder_size 0 0;
            }

            // Slide up the arrow when hover, slide down by default
            > .arrow-wrap > .arrow::after {
                margin-bottom: -$tsize + $toffset * 2;
                transition: margin-bottom 0.2s ease;
            }
        }

        > a:hover {
            background: none;
            border-color: $shc_color;

            > svg {
                fill: $shc_color;
            }

            > .arrow-wrap {
                max-height: 100%;
                transition: max-height 0.8s ease-in-out;

                > .arrow::after {
                    margin-bottom: 0;
                    transition: margin-bottom $sht_dur ease-in;
                }
            }
        }
    }
}

#info-back1info-backnfo-back3, #info-wrap {
    @function half($num) {
        @return (100.0 - $num) / 2.0;
    }

    $width: 65%;
    $height: 85%;
    width: $width;
    height: $height;
    left: half($width);
    top: half($height);
    position: absolute;
    min-width: $svg_minw;
}

#info-back {
    position: absolute;
    display: block;
    content: '';
    width: 100%;
    height: 100%;
    z-index: -1;
    background-color: $back;
    opacity: 0.5;
}

#info-wrap {
    background-color: transparent;
    border: 1px solid $opposite;
}

#info {
    height: 100%;

    > #info-inner {
        padding: 2em;
        padding-bottom: 0;

        font: $helv-light;

        .h1 {
            font: $helv-ultra-light;
            font-size: $fsize * 4;
            text-align: center;
            margin-bottom: $fsize;
        }
    }
}
