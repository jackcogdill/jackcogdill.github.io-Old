function ease(t,a,n=100,e=100,o=16.67,r=Math.E,l=30){var i=0,c=e,h=function(){t(i),(c=-Math.pow(i/l,r)+e)<o&&(c=o),++i<=n?setTimeout(h,c):a()};setTimeout(h,c)}function setUp(){window.w=canvas.width=window.innerWidth,window.h=canvas.height=window.innerHeight,window.ctx=canvas.getContext("2d");var t=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);canvas.width=w*t,canvas.height=h*t,canvas.style.width=w+"px",canvas.style.height=h+"px",ctx.setTransform(t,0,0,t,0,0)}function rain(t,a){var n="#5CFF5C",e=.045,o="0123456789ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝ",r="14pt Anonymous Pro, monospace";window.fade_speed=34;var l=!1;window.drops=[],window.perma=[],window.finsh=[];var i=14*1.1,c=16.8,f=Math.floor(w/i);(f+t.length)%2==1&&f--;var s=w-f*i;s+=14*(1.1-1);var d=Math.floor(f/2),x=Math.floor(t.length/2),p=d-x,u=d+(t.length-x),v=Math.floor(h/c/2);v*=c;for(var m=0;m<f;m++)drops[m]=-1*Math.floor(Math.random()*(h/c))*c,drops[m]+=.1337,perma[m]=m>=p&&m<u&&" "!=t.charAt(m-p),finsh[m]=!1;function g(){ctx.shadowColor="",ctx.shadowBlur=0}var M=setInterval(function(){var f,d;finsh.every(function(t){return t})&&(clearInterval(M),f=0,d=setInterval(function(){g(),ctx.fillStyle="rgba(0, 0, 0, 0.07)",ctx.fillRect(0,0,w,h),y(),35==++f&&(clearInterval(d),function(){function n(t,a,n){return a>t.length-1?t:t.substr(0,a)+n+t.substr(a+1)}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",r=["5CFF5C","5AF95A","57F257","55EC55","53E653","51DF51","4ED94E","4CD24C","4ACC4A","48C648","45BF45","43B943"];ease(function(a){for(var e=function(t,a){var n=[],e=-1;for(;-1!=(e=t.indexOf(a,e+1));)n.push(e);return n}(perma,!0),l=e.length/2,i=0;i<Math.floor(1+Math.random()*(l-1));i++){var f=Math.floor(Math.random()*e.length);drops[e[f]]+=c,t=n(t,e[f]-p,o.charAt(Math.floor(Math.random()*o.length)))}var f=Math.floor(Math.random()*e.length);a>40/3&&Math.random()>.67&&(perma[e[f]]=!1),ctx.fillStyle="rgba(0, 0, 0, 0.25)",ctx.fillRect(0,0,w,h);var s=Math.round(a/(40/r.length)),d="#"+r[s>=0?s:r.length-1];Math.random()>.67&&(d="#000"),y(d)},function(){!function(t,a,n){var o=(1-e)/t,r=e,l=setInterval(function(){ctx.fillStyle="rgba(0, 0, 0, "+r+")",ctx.fillRect(0,0,w,h),a(),(r+=o)>=1&&(clearInterval(l),ctx.fillStyle="#000",ctx.fillRect(0,0,w,h),n())},fade_speed)}(15,function(){},a)},40,id=25)}())},fade_speed)),g(),ctx.fillStyle="rgba(0, 0, 0, "+e+")",ctx.fillRect(0,0,w,h),ctx.font=r,ctx.fillStyle=n,drops.map(function(a,e){if(perma[e]&&Math.abs(a-v)<1e-4){var r=0;finsh.forEach(function(t){t&&r++}),r>=Math.floor(t.length/2)&&(l=!0),finsh[e]?(g(),ctx.fillStyle="#8F8"):(ctx.shadowColor="#FFF",ctx.shadowOffsetX=0,ctx.shadowOffsetY=0,ctx.shadowBlur=12,ctx.fillStyle="#AFA"),finsh[e]=!0,ctx.fillText(t.charAt(e-p),s/2+e*i,a)}else Math.random()>.97?Math.random()>.67?(ctx.shadowColor="#FFF",ctx.shadowOffsetX=0,ctx.shadowOffsetY=0,ctx.shadowBlur=12,ctx.fillStyle="#AFA"):(g(),ctx.fillStyle="#8F8"):(g(),ctx.fillStyle=n),ctx.fillText(o.charAt(Math.floor(Math.random()*o.length)),s/2+e*i,a),l&&!perma[e]&&a>h&&(drops[e]=-c,finsh[e]=!0),finsh[e]||(a>h+Math.random()*h*2/3?drops[e]=0:drops[e]=a+c)})},30);function y(a=n){ctx.font=r,g(),ctx.fillStyle=a,drops.map(function(a,n){perma[n]&&ctx.fillText(t.charAt(n-p),s/2+n*i,a)})}}function complete_page(){canvas.style.opacity="0",setTimeout(function(){canvas.style.zIndex="-1",canvas.outerHTML=""},1500),wrap.style.zIndex="2",wrap.style.opacity="1",wrap.style.maxHeight="none"}(()=>{setUp();rain("JACK COGDILL // WELCOME",complete_page)})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
